# MySQL



# Redis



## **主从复制**

```jsx
docker run -p 6381:6379 --name redis6380 -d 3c3da61c4be0
```



**作用**

* 高可用：数据冗余，故障转移
* 性能：读写分离



配置

* 端口
* 配置文件
* log文件
* data目录



**哨兵机制**



**作用**

主从复制中，主节点不可用时需要人工将从节点晋升为主节点，通知应用放更新主节点的地址。2.8后提供了哨兵机制，用来***监控、主从切换和通知***

定期给主从库发送PING命令判断是否下线，主库下线后进行选举，然后通知给其他从库。



主服务器挂掉时，需要手动的将从服务器变成主服务器，我们应该添加一个监控，让它自动选一个主服务器。



在主从复制下，主服务器挂掉后，从服务器不会做什么改变，从服务器挂掉后，重启时还需要手动再绑定到主服务器。**为了保证可用性**，在主服务器和从服务器上都加上哨兵来监控，达到自动化控制。

哨兵模式，能够后台监控主机是否故障，故障后根据投票数自动将从服务器变为主服务器，主服务器被设置为从服务器。



**原理**

1.  每个Sentinel频率向它所知的Master，Slave以及其他 Sentinel 实例发送一个PING命令。 
2.  如果一个实例（instance）距离最后一次有效回复PING命令的时间超过 own-after-milliseconds 选项所指定的值，则这个实例会被Sentinel标记为主观下线 。
3.  如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要确认Master的确进入了主观下线状态。 
4.  当有足够数量的Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态，则Master会被标记为客观下线。 如果数量不够或者PING命令有了返回，主管下线状态就会被移除。
5.  通过发布与订阅功能， 将更新后的配置传播给所有其他 Sentinel



**如何选举**

1. 过滤掉下线的从库

2. 优先级高的(sentinel配置文件中，slave-priority 100,值越小，优先级越高)

3. 偏移量小的(跟主服务器最相近的)

4. runid(启动后自动生成)小的

如果网络故障等原因，没有产生leader的话，哨兵集群会等待一段时间(一般时超时时间的2倍)后重新进行选举。



**哨兵也是Redis的一个进程，如果哨兵自己挂了呢**

一般会用多个哨兵，并且多个哨兵间也相互监控

哨兵通过发布订阅机制来组成一个集群，通过INFO命令获得从库信息



**哪个哨兵执行主从切换**

一个哨兵将主库标记为下线状态后，就会征求其他哨兵的意见，是否进入主管下线状态，数量多时，紧接着进入选举过程



**故障转移**

1. 从库(新主节点)接触从库身份，升级为主库
2. 其他从库成为新主库的从库
3. 原主库恢复后也加入从库
4. 通知客户端主库发生变化





Reactor模式
IO 多路复用 select，poll，epoll 
NIO
Redis做缓存
Redis 做分布式锁
5种网络 IO 模型


Java
ThreadLocal原理
ConcurrentHashMap
AQS
CountDownLatch 



# 设计模式



# 算法



排序





___________________
计算机网络
数据结构与算法


-------------------
Java
MySQL
MQ
Redis
ES
MongoDB
Linux
Spring
计模式设
____________
Golang
Hive
Docker
分布式
__________________
SHGL
dehui
jiku
xianyong
yuecheng


Spring
-----------------
@Configuration
cglib
GET PUT POST DELETE


NET
________________
错误码


MySQL
________________
全文索引
